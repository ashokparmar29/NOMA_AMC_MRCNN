clc; 
clear variables; 
close all;
tic;
N = 200;
snr_db = 16;
snr = 10^(snr_db/10);
% BPSK 
bpsk = [-1+0i, 1+0i];
%QPSK
theta1 = cos(pi/8)+1i*sin(pi/8);
theta2 = cos(pi/16)+1i*sin(pi/16);
qpsk = theta1 * [0.7071+0.7071i,-0.7071+0.7071i, 0.7071-0.7071i,-0.7071-0.7071i];
psk8 = [1, 0.7071+0.7071i, 1i, -0.7071+0.7071i, -1, -0.7071-0.7071i,-1i,0.7071-0.7071i];
qam = theta2*[-1.0000 - 1.0000i
1.0000 - 1.0000i
1.0000 + 1.0000i
-1.0000 + 1.0000i
-3.0000 - 1.0000i
-1.0000 - 3.0000i
1.0000 - 3.0000i
3.0000 - 1.0000i
3.0000 + 1.0000i
1.0000 + 3.0000i
-1.0000 + 3.0000i
-3.0000 + 1.0000i
-3.0000 - 3.0000i
3.0000 - 3.0000i
3.0000 + 3.0000i
-3.0000 + 3.0000i];
qam16 = transpose(qam);
Y = [bpsk qpsk psk8 qam16];
%normalize Y
sqrt_mean = sqrt(mean(abs(Y).^2));
% sqrt_mean=1;
Y_norm = Y/sqrt_mean;
symbol_bpsk = Y_norm(1:2);
symbol_qpsk = Y_norm(3:6);
symbol_8psk = Y_norm(7:14);
symbol_16qam = Y_norm(15:end);

Pf = 0.8; Pn = 0.2;

%select type of modulation at far and near user randomly with equal
%probability

setof_symbs = {symbol_bpsk,symbol_qpsk,symbol_8psk,symbol_16qam};
true_lbls  = zeros(1,16000);
all_snrs = zeros(1,16000);
Mf_lik = zeros(4,16000); 
w=waitbar(0,'Why so impatient, I am workin...');
    for iter = 1:16000
        iter
        %now find likelihood
        %first need to implement eqn 3
        far_idx = 1;
        near_idx = 1;
        lik = zeros(1,N);
        mult_l = zeros(16,1);
        all_lik = zeros(16,N);
        
        
        h =(randn(1)+1i*randn(1))/sqrt(2); %channel rayleigh
        h = abs(h);
        h=1;
        z = sqrt(0.25)*(randn(1,N)+1i.*randn(1,N)); %AWGN   
        z=0;
        i = randi(4);
        true_lbls(iter) = i; 
        j = randi(4);
        
        %now we have i and j i.e. type of modulation for far and near user
        %select symbols
        symb_far = setof_symbs{i};
        symb_near = setof_symbs{j};
        xf = randsample(symb_far,N,true);
        xn = randsample(symb_near,N,true);
        y1 = sqrt(snr)*(h*(sqrt(Pf)*xf+ sqrt(Pn)*xn));
        y = y1+z;
        ps = sum(abs(y1).^2);
        pn = sum(abs(z).^2);
        computed_snr = ps/pn;
        all_snrs(iter) = computed_snr;%for each iteration snr value is stored
        for p = 1:16
            if rem(p,4) == 0
                near_idx = 4;
                B = setof_symbs{near_idx};
            else
                B = setof_symbs{rem(p,4)};
            end
            A = setof_symbs{far_idx};
    
            l1=length(A); 
            l2 = length(B);
            mult_l(p,1) = l1*l2;
            temp2_lik = zeros(1,l1*l2);
        
            for k = 1:N  
                idx = 1;
                for m=1:l1
                    for n=1:l2
                
                        temp_lik = exp((-1/2)*(abs(y(k)-h*(sqrt(Pf)*A(m)+ sqrt(Pn)*B(n))))^2)*(1/(2*pi));
                        temp2_lik(idx) = temp_lik;
                        idx =idx +1; 
                        
                    end
                end
                lik(1,k) = sum(temp2_lik);
            end
            all_lik(p,:) = lik;    
            
    
            if(rem(p,4) == 0)
                far_idx = far_idx+1;   
            end
        end
    
    log_lik_temp = sum(log(all_lik),2)-N*log(mult_l);
    log_lik = log_lik_temp([1:4; 5:8; 9:12; 13:end]);
    %marginal likelihood
    mar_lik = zeros(4,1);
    for g =1:4
        mar_lik(g) = sum(log_lik(g,:));
    end
    %first column-->bpsk; second -- > qpsk; third---> 8psk, fourth-->16qam;
    Mf_lik(:,iter) = mar_lik;
    waitbar(iter/16000);
    end
    close(w);

%predictions
[max_lik, predic] = max(Mf_lik);
pred_lbl = unique(predic);
count_p= histc(predic,pred_lbl);
true_lbl = unique(true_lbls);
count_t = histc(true_lbls,true_lbl);
save results5.mat predic true_lbls;

%snr crosscheck
avg_snr = sum(all_snrs)/16000;
toc;